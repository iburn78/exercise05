[AJAX Exercise, lessons learned]

- JSON vs XML: use JSON
    const data = '{"employees":[
      {"firstName":"John", "lastName":"Doe"},
      {"firstName":"Anna", "lastName":"Smith"},
      {"firstName":"Peter", "lastName":"Jones"}
    ], "age": "function () {return 30;}" 
    }';
    const obj = JSON.parse(data);
    obj.age = eval("(" + obj.age + ")");

    obj.employees[0].lastName -> Doe
    obj.age() -> 30
    json_data = JSON.stringify(obj) -> will return JSON data format


- Django model, form, view, html
    <models.py>
        from django.db import models

        class Friend(models.Model):
            nick_name = models.CharField(max_length=100, unique =  True)
            name = models.CharField(max_length=100)
            lives_in = models.CharField(max_length=150, null = True, blank = True)
            dob = models.DateField(auto_now=False, auto_now_add=False)

            def __str__(self):
                return self.nick_name

    <forms.py>
        from .models import Friend
        from django import forms
        import datetime

        class FriendForm(forms.ModelForm):
            ## change the widget of the date field.
            dob = forms.DateField(
                label='What is your birth date?', 
                # change the range of the years from 1980 to currentYear - 5
                widget=forms.SelectDateWidget(years=range(1980, datetime.date.today().year-5))
            )
            def __init__(self, *args, **kwargs):
                super(FriendForm, self).__init__(*args, **kwargs)
                # add a "form-control" class to each form input for enabling bootstrap
                for name in self.fields.keys():
                    self.fields[name].widget.attrs.update({
                        'class': 'form-control',
                    })
            class Meta:
                model = Friend
                fields = ("__all__")

    <views.py>
        from django.shortcuts import render
        from django.http import JsonResponse
        from django.core import serializers
        from .forms import FriendForm
        from .models import Friend
        from django.views import View

        def indexView(request):
            form = FriendForm()
            friends = Friend.objects.all()
            return render(request, "myapp/index.html", {"form": form, "friends": friends})

        def postFriend(request):
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest' and request.method == "POST":
                form = FriendForm(request.POST)
                if form.is_valid():
                    instance = form.save()
                    ser_instance = serializers.serialize('json', [ instance, ])
                    return JsonResponse({"instance": ser_instance}, status=200)
                    # DOUBLE JSON... -> need to use double JSON.parse()
                else:
                    return JsonResponse({"error": form.errors}, status=400)
            return JsonResponse({"error": ""}, status=400)

        def get_java(request):
            name = request.GET.get('name', None)
            age = request.GET.get('age', None)
            result = name + " with age " + age + " entered "
            return JsonResponse({"result": result}, status = 200)

        def post_java(request):
            return JsonResponse({"result":request.POST.get('comment')}, status = 200)

        def checkNickName(request):
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest' and request.method == "GET":
                nick_name = request.GET.get("nick_name", None)
                if Friend.objects.filter(nick_name = nick_name).exists():
                    return JsonResponse({"valid":False}, status = 200)
                else:
                    return JsonResponse({"valid":True}, status = 200)
            return JsonResponse({}, status = 400)

        # if request.is_ajax(): is jquery specific way, intead use the following
        # if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        # request.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); has to be set after open()

    <or class-based...>
        class FriendView(View):
            form_class = FriendForm
            template_name = "myapp/index.html"

            def get(self, *args, **kwargs):
                form = self.form_class()
                friends = Friend.objects.all()
                return render(self.request, self.template_name, {"form": form, "friends": friends})

            def post(self, *args, **kwargs):
                if self.request.headers.get('X-Requested-With') == 'XMLHttpRequest' and self.request.method == "POST":
                    form = self.form_class(self.request.POST)
                    if form.is_valid():
                        instance = form.save()
                        ser_instance = serializers.serialize('json', [ instance, ])
                        return JsonResponse({"instance": ser_instance}, status=200)
                    else:
                        return JsonResponse({"error": form.errors}, status=400)
                return JsonResponse({"error": ""}, status=400)


    <urls.py>
        path('', indexView),
        path('post/ajax/', postFriend, name = "post_friend"),
        path('get/ajax/', checkNickName, name = "check_nickname"),
        path('post_java/', post_java, name = "post_java"),
        path('get_java/', get_java, name = "get_java"),
        path("cbv", FriendView.as_view(), name = "friend_cbv"),
        # post request url must be ending with '/'


    <index.html>
        {% extends "myapp/base.html" %}
        {% block content %}
        <form id="friend-form">
            {% csrf_token %}
            {% for field in form %}
            <label>{{ field.label }}</label>
            {{ field }}
            {% endfor %}
            <input type="submit" value="Create Friend">
            # 'submit' can be captured in javascript -> see below
        </form>
        <button type="button" onclick="get_java(event)">get</button>
        # 'event' parameter is necessary for prevent default in javascript

        <form id="myForm">
            <input type="text" name="comment">
            <button type="button" onclick="postComment(event)">post</button>
        </form>
        <div id="result">
        </div>
        <table id="my_friends">
            <thead>
                <tr>
                    <th>Nick name</th>
                    <th>name</th>
                    <th>DOB</th>
                    <th>lives in</th>
                </tr>
            </thead>
            <tbody>
                {% for friend in friends %}
                <tr>
                    <td>{{friend.nick_name}}</td>
                    <td>{{friend.name}}</td>
                    <td>{{friend.dob | date:"Y-m-d"}}</td>
                    <td>{{friend.lives_in}}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        </div>
        {% endblock content %}

        {% block javascript %}
        <script>
            function get_java(e) {
                e.preventDefault();
                var request = new XMLHttpRequest();
                request.open("GET", "get_java?name=Andy&age=45");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var dict = this.responseText;
                        var obj = JSON.parse(dict); 
                        document.getElementById("result").innerHTML = obj.result;
                    }
                };
                request.send();
            }
    
            function postComment(e) {
                e.preventDefault();
                var request = new XMLHttpRequest();
                request.open("POST", "post_java/");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var dict = this.responseText;
                        var obj = JSON.parse(dict); 
                        document.getElementById("result").innerHTML = obj.result;
                    }
                };
                var myForm = document.getElementById("myForm");
                var formData = new FormData(myForm);
                formData.append('csrfmiddlewaretoken', '{{ csrf_token }}');
                // {{ csrf_token }} can be set in django either in form or like this
                myForm.reset();
                request.send(formData);
            }
    
            const nn_field = document.getElementById("id_nick_name");
            nn_field.addEventListener("focusout", e => {
                e.preventDefault();
                var request = new XMLHttpRequest();
                var nick_name = nn_field.value;
                request.open("GET", "get/ajax/?nick_name="+nick_name, true);
                request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                // Header has to be set to check to see if this is ajax request ater open()
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var dict = this.responseText;
                        var obj = JSON.parse(dict); 
                        if(!obj.valid) {
                            alert("You cannot create a friend with same nick name");
                            nn_field.value = "";
                            nn_field.focus();
                        }
                    }
                    else if (this.status === 400) {
                        console.log(this);
                    }
                };
                request.send();
            }); 
    

            const friendForm = document.getElementById("friend-form");
            friendForm.addEventListener('submit', e => {
                e.preventDefault();
                let request = new XMLHttpRequest();
                request.open("POST", "post/ajax/", true);
                request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                // Header has to be set to check to see if this is ajax request ater open()
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var dict = this.responseText;
                        var obj = JSON.parse(JSON.parse(dict).instance)[0].fields;
                        // double json.... 
                        pre = document.querySelector('#my_friends tbody').innerHTML
                        post = 
                        `<tr>
                            <td>${obj.nick_name||""}</td>
                            <td>${obj.name||""}</td>
                            <td>${obj.dob||""}</td>
                            <td>${obj.lives_in||""}</td>
                        </tr>`
                        + pre; 
                        document.querySelector('#my_friends tbody').innerHTML = post;
                        // innerHTML has to be merged like this way
                    }
                };
                var formData = new FormData(friendForm);
                // formData.append('csrfmiddlewaretoken', '{{ csrf_token }}');
                // {{ csrf_token }} can be set in django either in form or like this
                myForm.reset();
                request.send(formData);
            }); 
        </script>
        {% endblock javascript %}

        # in django templates, multiple include is possible {% block 'name' %} {% endblock 'name %} in a html document